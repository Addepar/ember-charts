{{!-- To add shadow main-content-container-shadow --}}
<div class="col-md-10 col-md-offset-2 left-border main-content-container">
  <h1>Ember Charts API</h1>
  <p>
    Each chart type in Ember Charts is implemented by a separate <em>Ember.Component</em>
    child class, which is the default export of its own ES6 module.
    For example, to use vertical bar charts, you'd use the
    <em>'ember-charts/components/vertical-bar-chart'</em>     module:
  </p>

<pre>&lbrace;&lbrace;!-- to use the component view in your template --&rbrace;&rbrace;
&lbrace;&lbrace;vertical-bar-chart data=bindingVar ... &rbrace;&rbrace;

// to extend the component class in your own script
import VerticalBarChartComponent from 'ember-charts/components/vertical-bar-chart';
var MyVbcComponent = VerticalBarChartComponent.extend({ ... });</pre>

  <p>
    To set the options below, create an object of the correct component class
    and set the corresponding properties on that object.
  </p>


  <h2>Time Series Chart Options - <em>'ember-charts/components/time-series-chart'</em></h2>
  <table class="table ember-charts-options">
    <tr>
      <th style="width: 200px;">Option</th>
      <th style="width: 150px;">Default</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>barData</td>
      <td>undefined</td>
      <td>
        <p>Time series data to be represented by bars.  This is an array of
        data points.  Each data point is an object with at least three fields:
        <em>time</em>, <em>value</em>, and <em>label</em>.  The time field
        contains a JavaScript Date.  The value field is a Number.  The label
        field indicates which group (series) a data point belongs to.  Example:</p>
        <div class="highlight">
<pre class="prettyprint lang-js">// average high temperature (degrees F) by city
[
  {
    date: new Date(2013, 05, 01),
    value: 64,
    label: 'San Francisco'
  },
  {
    date: new Date(2013, 05, 01),
    value: 93,
    label: 'Phoenix'
  },
  {
    date: new Date(2013, 06, 01),
    value: 66,
    label: 'San Francisco'
  },
  {
    date: new Date(2013, 06, 01),
    value: 103,
    label: 'Phoenix'
  },
  ...
]</pre>
        </div>
      </td>
    </tr>
    <tr>
      <td>lineData</td>
      <td>undefined</td>
      <td>
        <p>Time series data to be represented by lines.  Format is the same as for
        the <em>barData</em> time series above.</p>
      </td>
    </tr>
    <tr>
      <td>selectedInterval</td>
      <td>M</td>
      <td>
        <p>Interval between ticks on the time axis.  Can be 'H' (hours), 'D' (days), 'W'
        (weeks), 'M' (months), 'Q' (quarters), or 'Y' (years).</p>
      </td>
    </tr>
    <tr>
      <td>selectedSeedColor</td>
      <td>rgb(65, 65, 65)</td>
      <td>
        <p>Base color that the color palette will be generated from.</p>
      </td>
    </tr>
    <tr>
      <td>timeDelta</td>
      <td>month</td>
      <td>
        <p>The time interval used represented by each group when using grouped
        bars.  Can be 'day', 'week', 'month', 'quarter', 'year'</p>
      </td>
    </tr>
    <tr>
      <td>barPadding</td>
      <td>0</td>
      <td>
        <p>Space between bars, as fraction of total bar + padding space.</p>
      </td>
    </tr>
    <tr>
      <td>barGroupPadding</td>
      <td>0.25</td>
      <td>
        <p>Space between bar groups, as fraction of total bar + padding space.</p>
      </td>
    </tr>
    <tr>
      <td>yAxisFromZero</td>
      <td>false</td>
      <td>
        <p>Force the Y axis to start at zero, instead of the smallest Y value
        provided.</p>
      </td>
    </tr>
  </table>

  <hr>
  <h2>Horizontal Bar Chart Options - <em>'ember-charts/components/horizontal-bar-chart'</em></h2>
  <table class="table ember-charts-options">
    <tr>
      <th style="width: 200px;">Option</th>
      <th style="width: 150px;">Default</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>data</td>
      <td>undefined</td>
      <td>
        <p>Data to be represented by bars.  This is an array of data points.  Each
        data point is an object with at least two fields: <em>value</em>
        (Number), and <em>label</em> (String).</p>
        <div class="highlight">
<pre class="prettyprint lang-js">// Population
[
  {
    value: 825111,
    label: 'San Francisco'
  },
  {
    value: 984299,
    label: 'San Jose'
  },
  {
    value: 400740,
    label: 'Oakland'
  },
  ...
]</pre>
        </div>
      </td>
    </tr>
    <tr>
      <td>minBarThickness</td>
      <td>20</td>
      <td>
        <p>Minimum bar width in pixels.</p>
      </td>
    </tr>
    <tr>
      <td>maxBarThickness</td>
      <td>60</td>
      <td>
        <p>Maximum bar width in pixels.</p>
      </td>
    </tr>
    <tr>
      <td>selectedSeedColor</td>
      <td>rgb(65, 65, 65)</td>
      <td><p>Base color that the color palette will be generated from.</p>
    </td>
    </tr>
    <tr>
      <td>sortKey</td>
      <td>'value'</td>
      <td>
        <p>Name of the field from each data point by which the bars will be sorted.</p>
      </td>
    </tr>
  </table>

  <hr>
  <h2>(Unstacked) Vertical Bar Chart Options - <em>'ember-charts/components/vertical-bar-chart'</em></h2>
  <table class="table ember-charts-options">
    <tr>
      <th style="width: 200px;">Option</th>
      <th style="width: 150px;">Default</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>data</td>
      <td>undefined</td>
      <td>
        <p>Data to be represented by bars.  This is an array of data points.  Each
        data point is an object with at least two fields: <em>value</em>
        (Number), and <em>label</em> (String).  A third field <em>group</em>
        (String) is optional for each data point.  If at least one data point has
        a <em>group</em> field, then the bars will be grouped
        based on the value of this field.</p>
        <div class="highlight">
<pre class="prettyprint lang-js">// percentage absolute return
[
  {
    value: 21.51,
    label: 'Google',
    group: 'Tech'
  },
  {
    value: 10.10,
    label: 'Microsoft',
    group: 'Tech'
  },
  {
    value: 15.32,
    label: 'ExxonMobil',
    group: 'Energy'
  },
  {
    value: -7.11,
    label: 'Schlumberger',
    group: 'Energy'
  },
  ...
]</pre>
        </div>
      </td>
    </tr>
    <tr>
      <td>maxBarThickness</td>
      <td>60</td>
      <td>
        <p>Maximum bar width in pixels.</p>
      </td>
    </tr>
    <tr>
      <td>selectedSeedColor</td>
      <td>rgb(65, 65, 65)</td>
      <td>
        <p>Base color that the color palette will be generated from.</p>
      </td>
    </tr>
    <tr>
      <td>maxLabelHeight</td>
      <td>50</td>
      <td>
        <p>Space allocated for rotated labels on the bottom of the chart. If labels
        are rotated, they will be extended beyond labelHeight up to
        maxLabelHeight.</p>
      </td>
    </tr>
    <tr>
      <td>withinGroupPadding</td>
      <td>0</td>
      <td>
        <p>Space between bars within a single bar group, as a fraction of the bar width.</p>
      </td>
    </tr>
    <tr>
      <td>betweenGroupPadding</td>
      <td>0</td>
      <td>
        <p>Space between bar groups, as a fraction of the group width.</p>
      </td>
    </tr>
    <tr>
    <tr>
      <td>ungroupedSeriesName</td>
      <td>'Other'</td>
      <td>
        <p>If some but not all data points have a <em>group</em> field,
        then the ones that don't will be displayed in a group with this label.</p>
      </td>
    </tr>
    <tr>
      <td>sortKey</td>
      <td>'value'</td>
      <td>
        <p>Name of the field from each data point used for sorting when chart is grouped
        horizontally. The chart is sorted by the field's value for the first data
        point in each group, and each group is sorted by the field as well.</p>
      </td>
    </tr>
    <tr>
      <td>stackBars</td>
      <td>false</td>
      <td>
        <p>Displays data points with the same <em>group</em> field value as
        slices in a single stacked bar; otherwise, displays them as separate
        bars in a group as described above.</p>
        <p> <span style="color: red">DEPRECATED:</span>
        This feature does not correctly handle data points with negative <em>values</em>.
        Consider using the Stacked Vertical Bar Chart instead.
        </p>
      </td>
    </tr>
  </table>

  <hr>
  <h2>Stacked Vertical Bar Chart Options - <em>'ember-charts/components/stacked-vertical-bar-chart'</em></h2>
  <table class="table ember-charts-options">
    <tr>
      <th style="width: 200px;">Option</th>
      <th style="width: 150px;">Default</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>data</td>
      <td>undefined</td>
      <td>
        <p>Data to be represented by bars.  This is an array of data points;
        each data point will be displayed as a stacking slice within a single
        stacked bar.</p>
        <p>Each data point is an object with at least two fields: <em>value</em>
        (Number), and <em>sliceLabel</em> (String).  A third field <em>barLabel</em>
        (String) is optional for each data point.  If at least one data point has
        a <em>barLabel</em> field, then there will be multiple bars displayed,
        each labeled with the value of this field.</p>
        <div class="highlight">
<pre class="prettyprint lang-js">// percentage absolute return
[
  {
    value: 21.51,
    sliceLabel: 'Google',
    barLabel: 'Tech'
  },
  {
    value: 10.10,
    sliceLabel: 'Microsoft',
    barLabel: 'Tech'
  },
  {
    value: 15.32,
    sliceLabel: 'ExxonMobil',
    barLabel: 'Energy'
  },
  {
    value: -7.11,
    sliceLabel: 'Schlumberger',
    barLabel: 'Energy'
  },
  ...
]</pre>
        </div>
      </td>
    </tr>
    <tr>
      <td>maxBarThickness</td>
      <td>60</td>
      <td>
        <p>Maximum bar width in pixels.</p>
      </td>
    </tr>
    <tr>
      <td>strokeWidth</td>
      <td>1</td>
      <td>
        <p>Width of the white border surrounding each slice in pixels.</p>
      </td>
    </tr>
    <tr>
      <td>selectedSeedColor</td>
      <td>rgb(65, 65, 65)</td>
      <td>
        <p>Base color that the color palette will be generated from.</p>
      </td>
    </tr>
    <tr>
      <td>maxLabelHeight</td>
      <td>50</td>
      <td>
        <p>Space allocated for rotated labels on the bottom of the chart. If labels
        are rotated, they will be extended beyond labelHeight up to
        maxLabelHeight.</p>
      </td>
    </tr>
    <tr>
      <td>betweenBarPadding</td>
      <td>0</td>
      <td>
        <p>Space between bars, as a fraction of the bar width.</p>
        <p>COMPATIBILITY NOTE: If and when support for groups of stacked bars is added,
        this will be replaced by two properties to track the space between bar groups
        and the space between bars within a group.</p>
      </td>
    </tr>
    <tr>
      <td>ungroupedSeriesName</td>
      <td>'Other'</td>
      <td>
        <p>If some but not all data points have a <em>barLabel</em> field,
        then the ones that don't will be displayed in a bar with this label.</p>
      </td>
    </tr>
    <tr>
      <td>sortKey</td>
      <td>'value'</td>
      <td>
        <p>Name of the field from each data point used for sorting when chart is grouped
        horizontally. The chart is sorted by the field's value for the first data
        point in each group, and each group is sorted by the field as well.</p>
      </td>
    </tr>
  </table>

  <hr>
  <h2>Pie Chart Options - <em>'ember-charts/components/pie-chart'</em></h2>
  <table class="table ember-charts-options">
    <tr>
      <th style="width: 200px;">Option</th>
      <th style="width: 150px;">Default</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>data</td>
      <td>undefined</td>
      <td>
        <p>Data to be represented by pie-slices.  This is an array of data points.
        Each data point is an object with at least two fields: <em>value</em>
        (Number), and <em>label</em> (String).</p>
        <div class="highlight">
<pre class="prettyprint lang-js">// Population
[
  {
  value: 825111,
  label: 'San Francisco'
  },
  {
  value: 984299,
  label: 'San Jose'
  },
  {
  value: 400740,
  label: 'Oakland'
  },
  ...
]</pre>
        </div>
      </td>
    </tr>
    <tr>
      <td>maxRadius</td>
      <td>2000</td>
      <td>
        <p>The maximum size in pixels of the radius of the pie.</p>
      </td>
    </tr>
    <tr>
      <td>minSlicePercent</td>
      <td>5</td>
      <td>
        The smallest slices will be combined into an "Other" slice until no
        slice is smaller than minSlicePercent. "Other" is also guaranteed to be
        larger than minSlicePercent.
      </td>
    </tr>
    <tr>
      <td>maxNumberOfSlices</td>
      <td>8</td>
      <td>
        <p>The maximum number of slices. If the number of slices is greater
        than this then the smallest slices will be combined into an "other"
        slice until there are at most maxNumberOfSlices.</p>
      </td>
    </tr>
    <tr>
      <td>selectedSeedColor</td>
      <td>rgb(65, 65, 65)</td>
      <td>
        <p>Base color that the color palette will be generated from.</p>
      </td>
    </tr>
    <tr>
      <td>sortKey</td>
      <td>'value'</td>
      <td>
        <p>Name of the field from each data point by which the pie-slices will be sorted.</p>
      </td>
    </tr>
  </table>

  <hr>
  <h2>Scatter Chart Options - <em>'ember-charts/components/scatter-chart'</em></h2>
  <table class="table ember-charts-options">
    <tr>
      <th style="width: 200px;">Option</th>
      <th style="width: 150px;">Default</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>data</td>
      <td>undefined</td>
      <td>
        <p>Data to be represented by points on a scatter plot.  This is an array of
        data points.  Each data point is an object with at least two fields:
        <em>xValue</em> (Number), and <em>yValue</em> (Number).  XValue and
        yValue correspond to an individual measurement.</p>

        <p>A third field <em>group</em>, indicating the group to which the
        measurement belongs,  is optional.  We display a different icon for each
        group if the number of groups is less than or equal to the maximum
        number of icons.  Otherwise, a standard icon is used for all groups.</p>
        <div class="highlight">
<pre class="prettyprint lang-js">// January minimum temperature in degrees F (yValue)
// by latitude (xValue) and region
[
  {
  "group": "West Coast",
  "xValue": 38.4,
  "yValue": 42
  },
  {
  "group": "Midwest",
  "xValue": 42.3,
  "yValue": 21
  },
  {
  "group": "West Coast",
  "xValue": 34.2,
  "yValue": 47
  },
  {
  "group": "South",
  "xValue": 33.9,
  "yValue": 37
  },
  ...
]</pre>
        </div>

      </td>
    </tr>
    <tr>
      <td>dotRadius</td>
      <td>7</td>
      <td>
        <p>Size of each icon on the scatter plot.</p>
      </td>
    </tr>
    <tr>
      <td>selectedSeedColor</td>
      <td>rgb(65, 65, 65)</td>
      <td>
        <p>Base color that the color palette will be generated from.</p>
      </td>
    </tr>
  </table>

  <hr>
  <h2>Bubble Chart Options - <em>'ember-charts/components/bubble-chart'</em></h2>
  <table class="table ember-charts-options">
    <tr>
      <th style="width: 200px;">Option</th>
      <th style="width: 150px;">Default</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>data</td>
      <td>undefined</td>
      <td>
        <p>Data to be represented by bubbles in a bubble chart.  This is an array
        of data points.  Each data point is an object with at least two fields:
        <em>value</em> (Number), and <em>label</em> (String).</p>
        <div class="highlight">
<pre class="prettyprint lang-js">// Population
[
  {
    value: 825111,
    label: 'San Francisco'
  },
  {
    value: 984299,
    label: 'San Jose'
  },
  {
    value: 400740,
    label: 'Oakland'
  },
  ...
]</pre>
        </div>
      </td>
    </tr>
    <tr>
      <td>selectedSeedColor</td>
      <td>rgb(65, 65, 65)</td>
      <td>
        <p>Base color that the color palette will be generated from.</p>
      </td>
    </tr>
  </table>
</div>
